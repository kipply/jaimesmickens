Yes, I am the Viceroy in question. Yes, it is difficult to become a Galactic Viceroy. No, I cannot make you a Galactic Viceroy too. Yes, it is technically within my powers to do so. But no, I will not do it, because I could give you a fish, or I could teach you how to fish, or I could just drop the mic and then ride away in my custom-built hovercraft, as Galactic Viceroys are wont to do.

I’m glad to hear that you enjoyed the articles! I’d like to write some more; hopefully I can do so in the second half of the year. The main impediment is finding the spare time. Each article takes about 10—20 hours to write; I have not found a wealthy aristocrat who will pay me to generate lengthy diatribes about computer science, so I have to fit the writing around my day job of being a researcher. If you, or someone you know, is a wealthy aristocrat, COME TALK TO ME.

I wish that there was a platonic dating site that matched writers with rich aristocrats looking to fund the production of extended jeremiads about Byzantine fault tolerance. Venture capitalists should be interested in this idea. It’s no dumber than the other things that they fund.

My main piece of advice is that if you’re trying to give a humorous talk, you have to continually thread humor into your presentation. You can’t just add three jokes and then expect that people will say “That was a funny talk!” afterwards. In general, any piece of communication (verbal or written, funny or not-funny) should have a small number of narrative themes; every part of the communication must reinforce those themes.

With respect to picking a particular style of humor for a talk, you have to do what feels natural. What kind of stuff do you find funny in real life? What comedians or movies or TV shows make you laugh? Study those performances, and think explicitly about why they succeed or fail. Then, apply that same type of analysis to your own stuff. When you give a practice talk, see what resonates with people and what doesn’t. Don’t be afraid to throw stuff away that isn’t working!

With respect to humor in computer science (or science in general), I actually think that there are a lot of opportunities to find comedy! My attitude in life is that, unless you’re directly helping to end war, poverty, and homelessness at the same time, you don’t have the right to be ultra-serious. I think that if scientists reflect on their day-to-day routines, they’ll find a lot of funny moments. The tricky part is expressing that humor to people who may not share your exact day-to-day routine. That’s why I think that it’s so important to observe people who do this well, and think explicitly about how their delivery creates humor. Also, as mentioned above, you have to practice the art of comedy in particular, and storytelling in general! Or make a pact with Satan to give you unholy powers. Hint: DO NOT MAKE A PACT WITH SATAN.

On the topic of being funny as a black person (or, more broadly, an underrepresented person), the trickiest part is that being funny is the process of making people accept your narrative, and, as someone from an underrepresented group, you may have to work harder to get credibility. There’s no easy way to get around this challenge. You have to practice your story-telling skills, and learn how to read body language and tone so that you can establish a good connection with your audience.

Try not to beat yourself up. Who hasn’t made an ill-advised pact with Satan and then been forced to deal with the consequences? This is why my office occasionally fills with ill-tempered scorpions that taunt me about my failed romantic relationships. #JustAnotherDayAsAComputerScientist

There are a lot of reasons why there aren’t more blacks in CS. I think that CS and STEM jobs are viewed positively in the black community. However, I think that the lack of African American role models is discouraging to black kids who might be thinking about a career in technology. I think that teachers and professors (often well-intentioned ones!) can implicitly or explicitly discourage ethnic minorities from STEM careers. There’s also an issue of social capital. A lot of stuff gets done in this world via social connections---you know a person who knows a person who helps you to get a job, or a conversation with an important person. If you’re the first person in your family to go to college, or you’re the first person to enter a STEM field, or if you went to a school whose alumni aren’t well-connected to important social networks, it can be more difficult for you to achieve some of your career goals. To be clear, it’s not impossible! I don’t want to discourage people from underrepresented groups to get into STEM fields. What I’m saying is that you will need to be more intentional about achieving your goals. When you attend classes, or go to conferences, or go to job interviews, you’ll need to be focused and prepared. You’ve got to do well academically, but you also have to be good at networking among your peers; I’d venture that this is just as important as the academic part. You need to be comfortable talking to people, not just about technical subjects, but about everyday things. You’d be surprised how many “technical” decisions about who to hire and which projects to pursue are ultimately driven by the ability of people to explain themselves and interact well with others. The only way to get better is to practice!

Finally, I’ll say that you can’t be afraid to have mentors who are different than you. This is true for everyone. If you’re a white guy, don’t be afraid to have a female mentor. If you’re a black female, don’t be afraid to have a white man as a mentor. There may be some cultural misunderstandings, but that’s okay. You’ve got to learn how to deal with those things anyway, so don’t be afraid of it. I can say with total confidence that the extent to which I’ve been successful in my career is the extent to which key mentors have taken a chance on me and put me in positions where I could succeed. This was true in grad school, this was true at Microsoft, and this was true at MIT.

Some of my favorite teaching moments are when students try to trick me into revealing the answers to test questions or homework assignments. They’ll stop by office hours, and say things like, “I was thinking about solving the project this way, or another way. What do you think about those two ways? BE AS DETAILED AS POSSIBLE.” I’ll say something noble and principled that involves deep scientific theories and the relationship of mankind to the universe. I will then wait for spontaneous applause. The applause never arrives. Instead, the student will say, “So, if I did the first thing, would I get a compiler error? If so, where should the semicolon go? BE AS SPECIFIC AS POSSIBLE ABOUT WHERE THE SEMICOLON SHOULD GO.” I’ll mention that learning the positions of semicolons is a key pedagogical goal for the class. They’ll look at me with a smile that says, “Well played, old man.” Then they’ll slink away and do a Snapchat or whatever it is that occupies young minds these days.

In all seriousness, I’ve really enjoying teaching at MIT. As a whole, the students are quite good. However, I will say that there are a surprisingly large number of MIT students who wear capes. Like, the vast majority of students don’t wear capes, but I have seen more than one student wearing a cape. Not a superhero cape, but a regular cape. The cape people also tend to eschew normal shirts, and wear some kind of loose-fitting elf jerkin. It’s strange, but I’m glad that they are protecting me from the things that only be-caped people can defend against.

Yeah, it’s definitely a tricky problem! I think that in STEM fields (and computer science in particular), conversations that are ostensibly about scientific things are often driven by people who have the most aggressive personalities. This works to the detriment of people who are naturally quieter or more collaborative. It also works to the detriment of people from underrepresented groups whose voices tend not to be given the automatic authority that is granted to someone from a majority group.

Personally speaking, if I’m in a group dynamic in which I don’t know people, or in which I know people but those people won’t necessarily give me technical respect, I devote 95% of my comments to technical material. I tell very few jokes. I know what you mean about how this can feel like you’re suppressing an important part of your personality, but it’s important to be taken seriously among your peers. Once you’ve established your technical chops, you can open up more, but I do think that it’s important to establish that technical authority early. I can think of specific individuals for which I did not do this, and for whom I then had to devote extra effort to convincing them that I was a serious researcher.

Another important thing is to be prepared for meetings. Have concrete things that you want to talk about, and know how those things relate to what other people will say. It can be difficult to be confident if you’re improvising, particularly if you’re improvising about technical things! Also, if you prepare what you want to say, and people try to cut you off, you can say, “one second---I just want to describe X, Y, and Z, which relates to the larger group goals in ways A, B, and C.” It takes practice to be firm about this, but it’s an investment that will pay off. You don’t want to be in the habit of getting talked over at meetings. You don’t need to dominate every meeting, but you want to establish a reputation as a serious thinker. Only then will the “softer” sides of your personality be perceived as compliments instead of the only thing that you’re known for.

That being said, I do encourage you to work your personality into your research and into your presentations! I do think that people reward communication which is seen as authentic and enthusiastic. However, you have to know your audience, and you have to be able to tweak your presentation in real time based on how your audience is responding. It’s particularly important to do this adjustment if you’re trying to be funny, since comedy can spiral out-of-control very quickly :-).

My final piece of advice is that you can’t please everyone. Some people like dry but technically competent talks; some people doze off during such presentations. Some people like more humorous presentations, but other people think that the comedy distracts from the core technical message. Personally speaking, I have an explicit non-goal of pleasing everyone. When I prepare for a meeting or a presentation, my goal is to present technical material as clearly as possible while indicating that I have fun when I do technical research. If some people don’t like it, then that’s the way it has to be :-).

Thanks for the question! You’re right that audiences arrive at my presentations with a dual expectation of hearing technical information and also comedic stuff. On the one hand, I like that I’ve been able to build high expectations for my talks---presumably this means that I’m doing something right :-). However, it can be stressful. In particular, I am always incredibly nervous before a talk; I prefer to be alone so that I can gather my thoughts, or run through the slides one last time. This can be surprising to people who expect that I have meth-user levels of energy at all times. People will often come up to me before a talk and want to chat about transient, light-hearted events from their life, and I tolerate this because I’m a wonderful person, but inside my head, I’m like, I AM DYING AND YOU ARE THE PERSON WHO IS KILLING ME. During the presentation itself, I’m too preoccupied with the mechanics of presenting to be worried, and I really enjoy playing off the crowd reactions as the presentation unfolds. However, those five minutes leading up to the presentation are pure nightmare.

With respect to coming up with particular jokes for particular technical topics, it’s both easy and hard. I generally don’t have a problem with devising something ridiculous to say about a random topic---the difficult thing is making that stuff funny in the context of a monologue instead of a dialogue. When you talk to someone in a normal conversation, you can riff off of their responses, and adjust what you’re saying to match their tone. In contrast, when you do a PowerPoint presentation, you go to war with the army that you have, not the one that you might discover that you should have brought half-way through the presentation. So, for me, it’s much more difficult to make a funny presentation about JavaScript than it is to have a funny conversation about JavaScript. When I make a presentation, I have to make sure that there’s a narrative flow, and that the slides mesh well with the words that I’m saying. I also work very hard on the specific phrasing of my words, because people are less tolerant of poor phrasing in prepared remarks, and a lot of jokes will fail if you don't nail the cadence.

I estimate that I spend 15—20 hours on a single presentation. This time commitment is a major reason why I sometimes decline speaking opportunities, even though (despite my initial stage fright) I like to give presentations. I wish that I could discover a way to condense my creative process, but I’ve been unsuccessful so far. I think that one reason that people enjoy my presentations is that they have a lot of content---I pack a lot of jokes and a lot of technical material into a short amount of time. This requires a lot of premeditation :-).

I didn’t have a “real” job until I got out of grad school. During my time at Georgia Tech, I was a teaching assistant for the introductory computer science class, and during my time as a PhD student, I did two internships at Microsoft Research (one in the Redmond lab, and one in the Cambridge UK lab). When I graduated from Michigan in 2008, I went directly to work at MSR as a researcher in the Distributed Systems group.

In retrospect, I wish that I had done an internship or two as an undergraduate. I also wish that I had done more research as an undergraduate. Industry experience and research experience are two things that you can't get purely by reading books and taking classes :-).

I have many fond memories of working with Brian. My fondest memory is how he didn’t fire me during my first two years of graduate school, even though I was fairly ridiculous and I didn’t know much about the process of doing good research. My favorite project with Brian in terms of research was our work on predicting host availability in distributed systems. I think that we dealt with an interesting and important technical problem, and our NSDI paper later became the core of my dissertation. Another favorite project was a kernel hacking project in which I was trying to modify the Linux networking stack. I was deep in the guts of the beast, trying to understand a bunch of asynchronous interrupt insanity, and Brian came to my office one day and asked “How’s it going?”, and I looked at him with sad eyes and simply said, “I’m in the kernel,” and we both knew that, if I survived, a boy would become a man.

My public opinion on passwords is that yes, they will definitely go away, because I believe in the relentless march of progress in the face of impossible odds. My private, deeply-held view is that passwords are unlikely to go away, because it seems like they are the least terrible thing in a horrifically bad solution space. For example, biometrics seem amazing until you realize that they’re easy to spoof and that, once someone has stolen your iris signature, it’s fairly difficult for you to get a new iris. Hardware-based authentication tokens seem promising, except for the fact that I am absolutely not going to carry a hardware-based authentication token. So, maybe I could use my smartphone as an authentication token, even though it’s crawling with random apps that have all the permissions because I gave them all the permissions because it seems reasonable for Flappy Bird to have access to my network, my front-facing camera, and my back-facing camera. So, uh, maybe passwords will have to suffice :-).

Regarding PGP, I get exhausted when I think about it. It’s a good idea in theory, but key-signing parties are too nerdy for me to get into, even though I’ve watched the new “Star Wars” trailer 71 times and I have often wished that I could live in the “Blade Runner” world even though that world is filled with rain and evil androids and cryptic origamis that hint at poignant truths just beyond the edge of reason. When someone proposes that we exchange email using PGP, I’ll say, “Ok, I’ll send you that email soon!”, but with 100% likelihood I will never send that email, because I get an autoimmune disease when I think about all of the things that would have to change in my life for that PGP email to actually get sent. I think that people who only receive PGP emails are only talking to PGP people; those emails probably use some kind of secret patois in which all verb conjugations involve the awkward exchange of megabytes of Base64-encoded data. Thanks but no thanks! I see the tortoise on its back; I do not think I’ll help it.

I’ve encountered many horrible bugs. One of the more frustrating ones involved a system that I built for speculative execution in JavaScript code. Basically, my system would create a copy of a web page’s JavaScript state, guess an action that the user might do (like clicking a button), and then update the speculative copy of the page with the results of the speculated action. Later, if the user actually performed that action, the browser could immediately commit the speculative copy of the state instead of waiting for networking calls to complete, and for rendering to finish, and so on. Debugging that system was a pure nightmare, because, at any given moment, I had multiple versions of reality lying around. Every variable would have different, ominous copies that were just lurking and waiting to mess up my jam. At one point, I built a custom debugging library, but when I launched it, my system made multiple copies of it too. The whole experience was awful. The ultimate cause of the bug was that I forgot a “var” statement inside of a function declaration, meaning that a variable that I thought was function-local was actually a global variable that was being reused across different function invocations. So petty. So infuriating.

I have two separate bands because I don’t have the time to have three separate bands. Being in just a single one-man band is quite demanding---you are responsible not only for writing and playing all of the music, but for destroying hotel rooms, showing up three hours late for concerts, and crashing expensive cars that you bought just the other day. As you can imagine, it can be a frustrating and lonely venture to do all of this by yourself. However, I am confident that, in the near future, I will have a third band whose internal politics may or may not cause one of the first two bands to break-up.

Learning how to do good research was a big challenge, and it’s still something that I try to improve. After I got out of undergrad, I had this mistaken idea that “research” was just “applied programming”: I could think of an idea for an awesome program, and then I’d build that program, and then I’d tell people what I built, and then I’M FAMOUS YO. This is not what research is :-). Research is about proposing interesting questions, or identifying important real-world problems, and then exploring the implications of those questions or those problems. Along the way, you may happen to write some code. Indeed, if you do systems research, you’ll probably write a lot of code. However, the code is generally not the most interesting thing—the most interesting thing is the problem that you decided to attack, and the solution that you devised.

It’s difficult to learn how to ask good questions. One reason is that good questions often require a strong understanding of the preexisting scientific literature, and none of us are born with that knowledge. This problem gets better with time, assuming that you keep track of the latest results in your field. A more tricky obstacle to asking good questions is that you have to adopt a philosophical perspective that is a bit unnatural. You have to be able to ignore superfluous details and be able to distill the essence of current solutions; what’s good about them, and what’s bad? You have to be able to relentlessly discard your own ideas if you find them to be lacking, and you have to frequently question your ideas even if they seem good. You also have to be able to figure out ways to actually answer the questions that you posed. This is trickier than it might seem, since the world makes it difficult to prove things :-).

So, learning how to pose questions (and then answer them in a convincing manner) has been the biggest intellectual challenge that I’ve experienced in my career as a researcher. I’ve been lucky to work with brilliant minds at MSR and MIT, and I’m extremely grateful for that. As I mentioned in an answer to another question, the greatest thing that you can do for your intellectual growth is to expose yourself to people who are smarter than you, and who will engage you and challenge your ideas. It’s painful, but it’s worthwhile.

With respect to challenges that arose from being a member of an underrepresented group, I think that there were two main challenges. First, I had to shed the self-consciousness of being in meetings where I would be the only person of color. Second, I had to ensure that, at those meetings, my voice was heard. To do the latter, I did my homework: I always came to meetings prepared; I read books about body language and how to make effective presentations; and, in situations where I thought that I was being unfairly talked-over, I made a personal policy that I would firmly (but politely) insist that I needed to finish what I was saying. By learning how to stand up for myself in meetings and communicate effectively, I was able to get rid of the self-consciousness, since those feelings only emerged when I felt like I was not being an active member of the group.

Thanks for the question---it’s an interesting one! I think that computer science is pretty amenable to independent research. If you have a laptop or desktop, you can develop and test code; if you have access to Azure or EC2, you can run distributed experiments. Many computer science conferences have double-blind reviewing, meaning that, if you submit a research paper, nobody will know that you lack traditional research credentials. Source repositories like GitHub also make it easy to share your code with others. So, there are a lot of ways to get your results to the public. You asked “if this is so easy, why aren’t more people doing it?” The answer is that doing research is not easy, even if it’s relatively easy to get access to the tools :-).

Despite the existence of things like GitHub and EC2, it’s true that the vast majority of basic research is done by universities and industrial labs, not by individuals. I think that there are several reasons for this. First, there are network effects to doing basic research alongside other basic researchers---the cross-pollination of ideas is a force multiplier. Second, there’s a formal aspect to doing research. For example, identifying good research problems is a skill that must be learned and practiced. As another example, there are best practices for running experiments that prove what you want them to prove. PhD programs try to teach those skills, and basic research often emerges from groups of people with PhDs. So, depending on what kind of career you want, working in a university or industrial research lab may be your best bet for getting paid to do basic research.

Lionel Ritchie is always here. He never sleeps, and his constant, mildly-irritating presence keeps us focused as we struggle to understand JavaScript’s bizarre semantics.

Growing up, my role models were not associated with a particular career that I wanted. Instead, my role models were people who had personal characteristics that I admired and that I wanted to emulate. For example, my mother is an important role model for me, because she’s very compassionate but incredibly tough. She doesn’t complain when life is difficult, and she is fiercely loyal to the people that she loves. I respect this immensely, and I try to be like this as well. As I’ve gotten older, I’ve grown to appreciate the virtues of toughness, and the importance of maintaining emotional balance in good times and bad times.

Once I got interested in research, I discovered a variety of role models in computer science, and I’ve been lucky enough to work alongside some of them (e.g., Bill Bolosky at MSR, Frans Kaashoek at MIT). One of my favorite parts of being alive is watching how people think. I’m continually fascinated by how people interpret and question the world, and I spend a lot of time trying to understand how people like Bill and Frans think. Once I discover the secret, I will obviously tell no one so that I can maintain my competitive advantage. However, I obviously digress.

Comedians are another class of role model for me. In particular, I’m really inspired by Louis C.K. I didn’t use the word “inspired” lightly—that’s the exact word that I intended to use. I think that he’s the closest thing society has to a comedic genius. His ability to mix comedy with dark subject matter is amazing, and I love his storytelling style—his body language, his vocal cadence, his sentence structure. This paragraph has become a love letter to Louis C.K., so I’m going to stop it now before I start dotting my i's with hearts.

I also have role models who are authors. Chuck Klosterman is a favorite, along with Kurt Vonnegut and Ta-Nehisi Coates (whose ideas I don’t always agree with, but whose writing style I want to eat so that I can absorb its powers).

Umm (nervous laughter), you see (starts to fidget uncomfortably) . . :-). I think that I had a paper that was rejected five times before getting accepted. This, uh, is not the common case for me, but it happens to the best of us. There’s a large amount of noise in the reviewing process; I’ve seen this as a member of program committees. When you look at the complete batch of papers that are submitted to a conference, there are basically 10% which are atrocious and which will never get into Readers’ Digest; there are 5% which are golden and which are slam-dunks for acceptance; and then there’s a bell-curve of quality in-between. As a researcher, you hope that your papers will always be in the 5% golden category, but more realistically, the only thing that it’s realistic to strive for is to be in the top quartile. For all of its warts, the peer review system does a pretty good job in improving papers (and I think that many papers in the 5% golden category have been sharpened by previous reject-and-revise cycles). It’s frustrating to have your papers rejected, but good work usually gets published eventually.

I guess that I introduced myself to computer science :-). As a teenager, I knew that I wanted to have some kind of career in science or engineering, and when I got to Georgia Tech as an undergrad, I declared myself a CS major, figuring that I could switch later if I didn’t like it. As it turns out, I never switched! However, there was no specific person who encouraged me to go into computer science. In retrospect, I do wish that I had been exposed to computer science more often as a child. I did goof around with computers as a kid, and I enjoyed surfing the web and playing video games and what not. However, I didn’t really understand the importance of algorithms and software engineering until I got to college.

There are several reasons why I stuck with CS. First of all, I like solving problems, and I like building things. Computer science gives me the opportunity to do both. I also think that computer science acts as a force multiplier for other human endeavors. For example, distributed computation allows physicists to simulate the weather, and Amazon to keep track of customer orders, and Facebook to inform my ridiculous friends about the ridiculous things that I myself am doing. I enjoy working in a field which can potentially help so many people!

I guess that I introduced myself to computer science :-). As a teenager, I knew that I wanted to have some kind of career in science or engineering, and when I got to Georgia Tech as an undergrad, I declared myself a CS major, figuring that I could switch later if I didn’t like it. As it turns out, I never switched! However, there was no specific person who encouraged me to go into computer science. In retrospect, I do wish that I had been exposed to computer science more often as a child. I did goof around with computers as a kid, and I enjoyed surfing the web and playing video games and what not. However, I didn’t really understand the importance of algorithms and software engineering until I got to college.

There are several reasons why I stuck with CS. First of all, I like solving problems, and I like building things. Computer science gives me the opportunity to do both. I also think that computer science acts as a force multiplier for other human endeavors. For example, distributed computation allows physicists to simulate the weather, and Amazon to keep track of customer orders, and Facebook to inform my ridiculous friends about the ridiculous things that I myself am doing. I enjoy working in a field which can potentially help so many people!
Does your group have a yearly conference? If not, you might consider having one. I say this because face-to-face interactions are extremely important for spinning up collaborations and long-term discussions. I realize that organizing a conference is a very complex endeavor, but I think that conferences really help to create a sense of community in a way that online discussions alone cannot. Conferences also help with professional networking, which is extremely important for one’s ultimate career success. If having a full-blown conference is infeasible, you may be able to co-locate a workshop alongside a bigger, preexisting tech conference. Alternatively, you might be able to offer travel scholarships for BIT members to go to conferences as a group; as you know, conferences are super-expensive, so any kind of financial support can lower the barrier to participation for POC. In summary, anything that gets people in the same room is useful for building community!
