Using linear algebra and a shot-by-shot analysis of “Pulp Fiction,” I prove that any distributed system will be broken 93% of the time. In the remaining 7% of the time, the system will respond to your requests, but it will hang out at skateboard parks and listen to disreputable music.
Many people say that mobile devices are the future. Apparently, the future is composed of devices that are shaped like optimally droppable objects, and whose sole purpose is to hold a charge for 17 minutes before transforming into a cellphone-sized pocket stone.
It's difficult to make transistors any smaller because nature hates us and quantum mechanics are stealing our voltage. Perhaps we should return to the abacus; sometimes, the old ways are the best ways.
Even as we speak, systems programmers are doing pointer arithmetic so that children and artists can pretend that their x86 chips do not expose an architecture designed by Sauron.
Wherein it is revealed that 1024-bit keys cannot prevent people from sending their credit card numbers to Nigerian princes. (I think that 1025-bit keys might solve the problem, but nobody listens to my common-sense advice.)
Network-accessible applications seemed like a good idea. Then somebody invented JavaScript, HTML, and CSS. THE DREAM BECAME A NIGHTMARE. Unless you like buggy, standards-hating web browsers, in which case, hey, cool dream.

Young people often come up to me and say that “the cloud is the future.” This is proof that young people are idiots. In this talk, I also describe why the middle aged people who built the cloud are idiots. I don’t say anything bad about old people, mainly because I love their charming stories and their delightful insistence that ATM machines were created by the Devil.
It’s been known for years that JavaScript is a dangerous, unholy language that is banned in 27 countries and most fine restaurants. In this talk, I will use deeply personal and completely biased examples to describe why I hate JavaScript. I will then provide additional reasons why the entire web stack is a thing that should not be tolerated by moral human beings. I will also describe some of my futile research efforts to make web browsers moderately less the worse thing ever.
In this bleak, relentlessly morbid talk, James Mickens will describe why making computers secure is an intrinsically impossible task. He will explain why no programming language makes it easy to write secure code. He will then discuss why cloud computing is a black hole for privacy, and only useful for people who want to fill your machine with ads, viruses, or viruses that masquerade as ads. At this point in the talk, an audience member may suggest that Bitcoins can make things better. Mickens will laugh at this audience member and then explain why trusting the Bitcoin infrastructure is like asking Dracula to become a vegan. Mickens will conclude by describing why true love is a joke and why we are all destined to die alone and tormented. The first ten attendees will get balloon animals, and/or an unconvincing explanation about why Mickens intended to (but did not) bring balloon animals. Mickens will then flee on horseback while shouting “The Prince of Lies escapes again!”
It’s difficult to administer large systems. In this talk, Mickens will argue that we should just give up. Instead of asking large systems to do anything at all, we should focus on less quixotic goals like turning lead into gold, or stopping Pokémon from having delightfully idiosyncratic magic abilities. Using case studies involving popular systems for version control and automatic OS updates, James Mickens will gradually make himself more and more depressed, and then he will tearfully answer questions in a way that makes everybody feel awkward. Mickens will then sign copies of his book. Note that Mickens has not written a book.
"What are the best practices for shipping high-quality software?" This question is an example of a question that I will not answer in my talk. Instead, I will describe why any software project that contains more than 10 lines of code is guaranteed to fail. Using my fragmentary knowledge of the laws of thermodynamics, I will explain why code is like a proton that must ultimately turn into a crystal or, uh, whatever it is that thermodynamics says will happen. I will demonstrate how unit tests, functional programming, and UML diagrams fail to address the primary source of software failure (namely, that software is an inherently bad idea because our brains evolved to hunt giant sloths with primitive stone tools, and MongoDB only partially resembles a giant sloth). I will conclude the talk by luring a group of agile programming experts into a large cardboard box using a collection of buzzwords like "evolutionary development" and "cross-functional team;" once captured, they will be forced to implement obscene, poorly-specified COBOL algorithms as I laugh maniacally and disable my compiler warnings.
Some people enter the technology industry to build newer, more exciting kinds of technology as quickly as possible. My keynote will savage these people and will burn important professional bridges, likely forcing me to join a monastery or another penance-focused organization. In my keynote, I will explain why the proliferation of ubiquitous technology is good in the same sense that ubiquitous Venus weather would be good, i.e., not good at all. Using case studies involving machine learning and other hastily-executed figments of Silicon Valley’s imagination, I will explain why computer security (and larger notions of ethical computing) are difficult to achieve if developers insist on literally not questioning anything that they do since even brief introspection would reduce the frequency of git commits. At some point, my microphone will be cut off, possibly by hotel management, but possibly by myself, because microphones are technology and we need to reclaim the stark purity that emerges from amplifying our voices using rams’ horns and sheets of papyrus rolled into cone shapes. I will explain why papyrus cones are not vulnerable to buffer overflow attacks, and then I will conclude by observing that my new start-up papyr.us is looking for talented full-stack developers who are comfortable executing computational tasks on an abacus or several nearby sticks.
In this presentation, I explain the signs that a tech idea is bad. The best indication is that the idea involves technology or is liked by someone who likes technology. After encouraging all venture capitalists to return their equity to Satan (the ultimate source of their power), I will awkwardly admit that the equity should have been cast into a black hole instead of being concentrated in the hands of a single demon lord. The audience will agree that hindsight is 20/20, and I will keep my generous severance package. There will be a lemonade break to allow any overpaid software engineers to drive up housing costs in their local neighborhoods. I will probably run out of lemonade because my ML model for predicting lemonade demand doesn’t actually encode any fundamental insights about the lemonade market. At the after-party, there will be a contest to see who can pretend to like Rust the most. Everyone will be a winner.
